
type Query {
  listServers: [ServerInfo] @aws_cognito_user_pools
  getMonthlyCost: [MonthlyCost] @aws_cognito_user_pools
  getLoginAudit(id: ID!): LoginAudit
  listLoginAudits(filter: ModelLoginAuditFilterInput, limit: Int, nextToken: String): ModelLoginAuditConnection
}

type Mutation {
  putServerMetric(input: ServerMetricInput!): ServerMetric @aws_iam
  changeServerState(input: ServerInfoInput!): ServerInfo @aws_iam
  triggerServerAction(input: ServerActionInput!): AWSJSON @aws_cognito_user_pools
  createLoginAudit(input: CreateLoginAuditInput!, condition: ModelLoginAuditConditionInput): LoginAudit
  updateLoginAudit(input: UpdateLoginAuditInput!, condition: ModelLoginAuditConditionInput): LoginAudit
  deleteLoginAudit(input: DeleteLoginAuditInput!, condition: ModelLoginAuditConditionInput): LoginAudit
}

type Subscription {
  onPutServerMetric: ServerMetric @aws_subscribe(mutations: ["putServerMetric"])
  onChangeServerInfo: ServerInfo @aws_subscribe(mutations: ["changeServerState"])
  onCreateLoginAudit: LoginAudit @aws_subscribe(mutations: ["createLoginAudit"])
  onUpdateLoginAudit: LoginAudit @aws_subscribe(mutations: ["updateLoginAudit"])
  onDeleteLoginAudit: LoginAudit @aws_subscribe(mutations: ["deleteLoginAudit"])
}

type ServerMetric @aws_iam @aws_cognito_user_pools {
  id: String!
  cpuStats: AWSJSON
  networkStats: AWSJSON
  memStats: AWSJSON
  activeUsers: AWSJSON
}

input ServerMetricInput {
  id: String!
  cpuStats: AWSJSON
  networkStats: AWSJSON
  memStats: AWSJSON
  activeUsers: AWSJSON
}

type MonthlyCost @aws_iam @aws_cognito_user_pools {
  id: String!
  timePeriod: String!
  UnblendedCost: Float!
  UsageQuantity: Float!
}

input MonthlyCostInput {
  id: String!
  timePeriod: String
  UnblendedCost: Float
  UsageQuantity: Float
}

type ServerInfo @aws_iam @aws_cognito_user_pools {
  id: String!
  name: String
  type: String
  userEmail: AWSEmail
  state: String
  vCpus: Int
  memSize: Int
  diskSize: Int
  launchTime: String
  publicIp: String
  instanceStatus: String
  systemStatus: String
  runningMinutes: String
  groupMembers: AWSJSON
}

input ServerInfoInput {
  id: String!
  name: String
  type: String
  userEmail: AWSEmail
  state: String
  vCpus: Int
  memSize: Int
  diskSize: Int
  launchTime: String
  publicIp: String
  instanceStatus: String
  systemStatus: String
  runningMinutes: String
  groupMembers: AWSJSON
}

input ServerActionInput {
  action: String!
  instanceId: String!
  paramKey: String
  paramValue: String
}

type LoginAudit {
  id: ID!
  email: AWSEmail!
  action: String!
  expirationEpoch: AWSTimestamp
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelLoginAuditConnection {
  items: [LoginAudit]!
  nextToken: String
}

input ModelLoginAuditFilterInput {
  id: ModelIDInput
  email: ModelStringInput
  action: ModelStringInput
  expirationEpoch: ModelIntInput
  and: [ModelLoginAuditFilterInput]
  or: [ModelLoginAuditFilterInput]
  not: ModelLoginAuditFilterInput
}

input ModelLoginAuditConditionInput {
  email: ModelStringInput
  action: ModelStringInput
  expirationEpoch: ModelIntInput
  and: [ModelLoginAuditConditionInput]
  or: [ModelLoginAuditConditionInput]
  not: ModelLoginAuditConditionInput
}

input CreateLoginAuditInput {
  id: ID
  email: AWSEmail!
  action: String!
  expirationEpoch: AWSTimestamp
}

input UpdateLoginAuditInput {
  id: ID!
  email: AWSEmail
  action: String
  expirationEpoch: AWSTimestamp
}

input DeleteLoginAuditInput {
  id: ID!
}

