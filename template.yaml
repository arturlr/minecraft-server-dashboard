AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    "MineDash Backend \n"

Parameters:  

  ProjectName:
    Type: String
    Default: minecraft-dashboard
  AppValue:
    Type: String
    Default: minecraft
  MinecraftWorkingDir:
    Type: String
    Default: /opt/minecraft/server/
    Description: The path where the Minecraft Server is running. There is an option at the app to customized it per instances
  MinecraftRunCommand:
    Type: String
    Default: sudo screen -d -m java -Xmx3G -Xms3G -jar server.jar nogui &
    Description: Default Minecraft run command. There is an option at the app to customized it per instances
  AdminEmail:
    Type: String
    Description: Email (Gmail) that is going to be identified as the app admin
    AllowedPattern: '[^@]+@[^@]+\.[^@]+'
    
Globals:
  Function:
    AutoPublishAlias: live
    Handler: index.handler
    MemorySize: 256
    Runtime: python3.8
    Timeout: 120
    Tracing: Active

Resources:

  AdminEmailParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /amplify/minecraftserverdashboard/adminemail
      Type: String
      Value: !Ref AdminEmail
      Description: Email (Gmail) that is going to be identified as the app admin

  MinecraftWorkingDirParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /amplify/minecraftserverdashboard/default/workingDir
      Type: String
      Value: !Ref MinecraftWorkingDir
      Description: The path where the Minecraft Server is running. There is an option at the app to customized it per instances

  MinecraftRunCommandParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /amplify/minecraftserverdashboard/default/runCommand
      Type: String
      Value: !Ref MinecraftRunCommand
      Description: Default Minecraft run command. There is an option at the app to customized it per instances

  HelperLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: MinecraftDashboardHelper
      ContentUri: ./layers/helpers.zip
      CompatibleRuntimes:
        - python3.8
        - python3.7
      RetentionPolicy: Delete

  PythonJoseLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: PythonJose
      ContentUri: ./layers/python-jose/python-jose.zip
      CompatibleRuntimes:
        - python3.8
        - python3.7
      RetentionPolicy: Delete

  GraphQLLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Requests
      ContentUri: ./layers/graphql/graphql.zip
      CompatibleRuntimes:
        - python3.8
        - python3.7
      RetentionPolicy: Delete

  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "ScheduledRule"
      ScheduleExpression: "rate(2 minutes)"
      State: "DISABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "EventResponse"
              - "Arn"
          Id: "EventResponseV1"

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "EventResponse"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"

  ScheduledRuleParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /amplify/minecraftserverdashboard/scheduledrule
      Type: String
      Value: !Ref ScheduledRule
      Description: ScheduledRule

  EventResponse:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: minecraft-server-dashboard-eventResponse
      CodeUri: ./lambdas/eventResponse/
      Layers:
        - Ref: GraphQLLayer
        - Ref: HelperLayer
      Events:
        EC2StateTrigger:
          Type: CloudWatchEvent 
          Properties:
            Pattern:
              source:
                - aws.ec2
              detail-type:
                - EC2 Instance State-change Notification                
      Policies:
        - CostExplorerReadOnlyPolicy: {}
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSCloudTrailReadOnlyAccess
        - SSMParameterReadPolicy:
            ParameterName: "amplify/minecraftserverdashboard*"
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - logs:Get*
                - logs:List*
                - logs:StartQuery
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/minecraft/*'
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - appsync:ListGraphqlApis
                - appsync:GetGraphqlApi
                - appsync:GraphQL
              Resource: '*'
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - events:ListRules
                - events:DescribeRule
                - events:DisableRule
                - events:EnableRule
              Resource: "*"
      Environment:
        Variables:
          aplicationName: !Ref ProjectName
          appValue: !Ref AppValue
          APPSYNC_URL: '{{resolve:ssm:/amplify/minecraftserverdashboard/appsyncurl:1}}'

  ListServers:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: minecraft-server-dashboard-listServers
      CodeUri: ./lambdas/listServers/
      Layers:
        - Ref: PythonJoseLayer
        - Ref: HelperLayer
      Policies:
        - CostExplorerReadOnlyPolicy: {}
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSCloudTrailReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonCognitoReadOnly
        - SSMParameterReadPolicy:
            ParameterName: "amplify/minecraftserverdashboard*"
      Environment:
        Variables:
          aplicationName: !Ref ProjectName
          appValue: !Ref AppValue
          APPSYNC_URL: '{{resolve:ssm:/amplify/minecraftserverdashboard/appsyncurl:1}}'

  GetMonthlyCost:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: minecraft-server-dashboard-getMonthlyCost
      CodeUri: ./lambdas/getMonthlyCost/
      Layers:
        - Ref: PythonJoseLayer
      Policies:
        - CostExplorerReadOnlyPolicy: {}
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSCloudTrailReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonCognitoReadOnly
        - SSMParameterReadPolicy:
            ParameterName: "amplify/minecraftserverdashboard*"
      Environment:
        Variables:
          aplicationName: !Ref ProjectName
          appValue: !Ref AppValue
          APPSYNC_URL: '{{resolve:ssm:/amplify/minecraftserverdashboard/appsyncurl:1}}'


  TriggerServerAction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: minecraft-server-dashboard-triggerServerAction
      CodeUri: ./lambdas/triggerServerAction/
      Layers:
        - Ref: PythonJoseLayer
        - Ref: HelperLayer
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonCognitoReadOnly
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt StateMachine.Name
        - SSMParameterReadPolicy:
            ParameterName: "amplify/minecraftserverdashboard*"
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - ssm:PutParameter                
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/amplify/minecraftserverdashboard*
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:CreateGroup
                - cognito-idp:AdminAddUserToGroup
              Resource: '*'
            
      Environment:
        Variables: 
          StepFunctionsArn: !Ref StateMachine
          aplicationName: !Ref ProjectName
          appValue: !Ref AppValue
          APPSYNC_URL: '{{resolve:ssm:/amplify/minecraftserverdashboard/appsyncurl:1}}'

  ChangeServerState:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: minecraft-server-dashboard-changeServerState
      CodeUri: ./lambdas/stepFunctions/changeServerState/
      Layers:
        - Ref: HelperLayer
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonCognitoReadOnly
        - SSMParameterReadPolicy:
            ParameterName: "amplify/minecraftserverdashboard*"
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - cloudwatch:PutMetricAlarm
              Resource: '*'
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - ec2:StartInstances
                - ec2:StopInstances
                - ec2:RebootInstances
              Resource: '*'
      Environment:
        Variables:
          aplicationName: !Ref ProjectName
          appValue: !Ref AppValue
          APPSYNC_URL: '{{resolve:ssm:/amplify/minecraftserverdashboard/appsyncurl:1}}'

  SendCommand:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: minecraft-server-dashboard-sendCommand
      CodeUri: ./lambdas/stepFunctions/sendCommand/
      Layers:
        - Ref: HelperLayer
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - SSMParameterReadPolicy:
            ParameterName: "amplify/minecraftserverdashboard*"
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - ssm:List*
                - ssm:Describe*
                - ssm:Get*
                - ssm:SendCommand
              Resource: '*'
      Environment:
        Variables:
          aplicationName: !Ref ProjectName
          appValue: !Ref AppValue
          APPSYNC_URL: '{{resolve:ssm:/amplify/minecraftserverdashboard/appsyncurl:1}}'

  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ./lambdas/stepFunctions/step-functions.json
      DefinitionSubstitutions:
        changeServerState: !GetAtt ChangeServerState.Arn
        executeSSM: !GetAtt SendCommand.Arn
      Role: !GetAtt StatesExecutionRole.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
             LogGroupArn: !GetAtt StateMachineLogGroup.Arn

  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/states/${ProjectName}-StateMachine-LogGroup-${AWS::Region}'
  
  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*"

Outputs:
  StateMachineArn:
        Value: !Ref StateMachine
  StateMachineName:
      Value: !GetAtt StateMachine.Name
  EventResponseArn:
      Value: !GetAtt EventResponse.Arn
  ListServersArn:
      Value: !GetAtt ListServers.Arn
  SendCommandArn:
      Value: !GetAtt SendCommand.Arn