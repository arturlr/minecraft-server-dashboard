


filter @message like "the game" 
| parse @message "[net.minecraft.server.dedicated.DedicatedServer/]: * joined the game" as @userjoin
| parse @message "[net.minecraft.server.dedicated.DedicatedServer/]: * left the game" as @userleft
| stats count(@userjoin) - count(@userleft) by bin(5m) as t 
| sort t

filter @message like "the game" | parse @message "[net.minecraft.server.dedicated.DedicatedServer/]: * joined the game" as @userjoin | parse @message "[net.minecraft.server.dedicated.DedicatedServer/]: * left the game" as @userleft | stats count(@userjoin) as joined, count(@userleft) as left 

filter @message like "Request Headers" 
| parse @message "x-forwarded-for=[*,*]" as @xf1, @xf2
| limit 25

filter @message like "Request Headers" 
| parse @message "x-forwarded-for=[*,*]" as @xf1, @xf2
| stats count_distinct(@xf2) as lastTCPconection

$ curl -H 'x-api-key: <API KEY>' -d '{"query":"query {...}"}' <API URL>

curl -XPOST -H "Content-Type:application/graphql" -d '{ "query": "mutation CreateServerMetric($input: CreateServerMetricInput!) {CreateServerMetric(input: $input) {id,serverId,state,launchTime,publicIp,instanceStatus,systemStatus,cpu,network,activeUsers}"}' https://gtjfoqwjbvdv7jq5ie3kasoi4u.appsync-api.us-west-2.amazonaws.com/graphql


subscription OnPutServerMetric {
  onPutServerMetric {
    id
    activeUsers
    cpuStats
    memStats
    networkStats
  }
}


subscription OnChangeServerInfo {
  onChangeServerInfo {
    id
    diskSize
    instanceStatus
    launchTime
    memSize
    publicIp
    name
    runCommand
    runningMinutes
    state
    systemStatus
    type
    userEmail
    vCpus
    workingDir
  }
}  